% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactiveConditionalPanel.R
\name{reactiveConditionalPanel}
\alias{reactiveConditionalPanel}
\alias{reactiveConditionalPanelUI}
\title{reactiveConditionalPanel}
\usage{
reactiveConditionalPanel(input, output, session, condition)

reactiveConditionalPanelUI(id, ...)
}
\arguments{
\item{input, output, session}{Shiny input, output, and session objects.}

\item{condition}{Reactive boolean expression determining the visibility of
the panel.}

\item{id}{Namespace ID for the module.}

\item{...}{Elements to include in the panel.}
}
\value{
SERVER => TO BE REVIEWED AND HAMRONIZED, CONSIDER A SECTION Module
Outputs INSTEAD

UI => TO BE REVIEWED AND HAMRONIZED
}
\description{
Shiny module handling the visibility of a panel based on a
reactive \code{condition}.
}
\details{
In comparison to \code{\link[shiny:conditionalPanel]{shiny::conditionalPanel()}}, the \emph{reactiveConditionalPanel}
module provides a convenient abstraction from the JavaScript condition
details and only relies on the reactive input \code{condition}, to
determine which panels are visible.
}
\note{
The module relies on the \pkg{shinyjs} package, which means
\code{\link[shinyjs:useShinyjs]{shinyjs::useShinyjs()}} must be included in the app \code{ui} definition.
}
\examples{
if (interactive()) {
  library(shiny)
  panels <- LETTERS[1:10]
  ui <- fluidPage(
    shinyjs::useShinyjs(),
    titlePanel("Reactive panel visibility `conditionalPanel`"),
    sidebarLayout(
      sidebarPanel(sliderInput(
        "active_nr", "Number of active panels",
        min = 0, max = length(panels), step = 1, round = TRUE, value = 0
      )),
      mainPanel(mapply(
        reactiveConditionalPanelUI,
        panels,  lapply(panels, div),
        SIMPLIFY = FALSE
      ))
    )
  )
  server <- function(input, output) {
    lapply(panels, function(x) {
      callModule(
        reactiveConditionalPanel, x,
        reactive(x \%in\% head(panels, input$active_nr))
      )
    })
  }
  shinyApp(ui = ui, server = server)
}
}
\seealso{
Module \emph{\link{reactiveConditionalPanels}}, providing similar
functionality for multiple panels.
}
