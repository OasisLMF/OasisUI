% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamicColumn.R
\name{dynamicColumn}
\alias{dynamicColumn}
\alias{dynamicColumnUI}
\title{Resizable UI column}
\usage{
dynamicColumn(input, output, session, width)

dynamicColumnUI(id, width, ...)
}
\arguments{
\item{input}{Shiny input object.}

\item{output}{Shiny output object.}

\item{session}{Shiny session object.}

\item{width}{Width of the column, a reactive value for \code{dynamicColumn()},
non-reactive (or \link[shiny:isolate]{isolated}) for \code{dynamicColumnUI()}.}

\item{id}{Namespace ID for the module.}
}
\description{
Shiny module providing support for dynamic UI \link[shiny:column]{column} width
without re-rendering the column content.
}
\details{
Dynamic column width via \code{renderUI()} based on a reactive value forces the
re-rendering of the column content. This has the following undesired effects:
\itemize{
\item The state of the existing column UI content (including user input) is
lost.
\item Depending on the complexity of the content, rendering can slow-down the
re-sizing.
}

The \emph{dynamicColumn} Shiny module prevents re-rendering based on reactive column
width. Instead, it changes the class of the existing column UI element
(\code{"col-sm-<WIDTH>"}) depending on a reactive \code{width} value.
}
\note{
The module relies on \code{\link[shinyjs:addClass]{shinyjs::addClass()}} and \code{\link[shinyjs:removeClass]{shinyjs::removeClass()}}, which means
\code{\link[shinyjs:useShinyjs]{shinyjs::useShinyjs()}} must be included in the app \code{ui} definition.
}
\examples{
if (interactive()) {
  library(shiny)
  twoDynamicColumnsUI <- function(sidebar_w) {
    # make the UI rendering slow
    Sys.sleep(1)
    fluidRow(
      dynamicColumnUI(
        id = "sidebar", width = sidebar_w,
        radioButtons("radio", "Does radio selection persist re-sizing?", LETTERS[1:3])
      ),
      dynamicColumnUI(
        id = "main", width = 12L - sidebar_w,
        textInput("text", "Does text input persist re-sizing?", width = "100\%")
      )
    )
  }
  ui <- fluidPage(
    shinyjs::useShinyjs(),
    titlePanel("Resizable columns with `dynamicColumn` module"),
    fluidPage(
      fluidRow(sliderInput("sidebar_w", "Sidebar Width", 1L, 11L, 3L, 1L)),
      fluidRow(checkboxInput("dynamic", "Use dynamicColumn", FALSE)),
      fluidRow(uiOutput("twocols"))
    )
  )
  server <- function(input, output) {
    observe(
      if (input$dynamic) {
        # UI rendering non-reactive to input$sidebar_w
        output$twocols <-
          renderUI(twoDynamicColumnsUI(isolate(input$sidebar_w)))
        # reactivity via dynamicColumn module
        callModule(dynamicColumn, "sidebar", reactive(input$sidebar_w))
        callModule(dynamicColumn, "main", reactive(12L - input$sidebar_w))
      } else {
        # UI rendering reactive to input$sidebar_w
        output$twocols <-
          renderUI(twoDynamicColumnsUI(input$sidebar_w))
      }
    )
  }
  shinyApp(ui, server)
}
}
