% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactiveConditionalPanels.R
\name{reactiveConditionalPanels}
\alias{reactiveConditionalPanels}
\alias{reactiveConditionalPanelsUI}
\title{reactiveConditionalPanels}
\usage{
reactiveConditionalPanels(input, output, session, visible)

reactiveConditionalPanelsUI(id, panels)
}
\arguments{
\item{input, output, session}{Shiny input, output, and session objects.}

\item{visible}{Reactive string expression determining the visibility of
panels.}

\item{id}{Namespace ID for the module.}

\item{panels}{Named list of UI content for a set of panels. Only the panels
whose name matches the \code{visible} reactive input to the module server
function are shown. Panels with the same name are supported and shown
together.}
}
\value{
SERVER => TO BE REVIEWED AND HAMRONIZED, CONSIDER A SECTION Module
Outputs INSTEAD

UI => TO BE REVIEWED AND HAMRONIZED
}
\description{
Shiny module handling the visibility of a set of panels
depending on a reactive input.
}
\details{
In comparison to \code{\link[shiny:conditionalPanel]{shiny::conditionalPanel()}}, the \emph{reactiveConditionalPanels}
module provides a convenient abstraction from the JavaScript condition
details and only relies on the reactive input \code{visible}, to
determine which panels are visible.
}
\note{
The module relies on the \pkg{shinyjs} package, which means
\code{\link[shinyjs:useShinyjs]{shinyjs::useShinyjs()}} must be included in the app \code{ui} definition.
}
\examples{
if (interactive()) {
  library(shiny)
  ui <- fluidPage(
    shinyjs::useShinyjs(),
    titlePanel("Multiple reactive panel visibility via `reactiveConditionalPanels`"),
    sidebarLayout(
      sidebarPanel(
        radioButtons(
          "main_visible",
          "Active main panel",
          LETTERS[1:10]
        )
      ),
      mainPanel(
        reactiveConditionalPanelsUI(
          "main",
          c(
            mapply(SIMPLIFY = FALSE, textInput,
                   LETTERS[1:5], paste("Main Panel", LETTERS[1:5])),
            list(A = textInput("A-nother", "A-nother Main Panel"))
          )
        )
      )
    )
  )
  server <- function(input, output) {
    callModule(reactiveConditionalPanels, "main", reactive(input$main_visible))
  }
  shinyApp(ui = ui, server = server)
}
}
\seealso{
Module \emph{\link{reactiveConditionalPanel}}, providing similar functionality
for a single panel.
}
