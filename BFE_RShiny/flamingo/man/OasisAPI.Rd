% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oasisapi.R
\docType{class}
\name{OasisAPI}
\alias{OasisAPI}
\title{OasisAPI}
\format{\code{\link{R6Class}} object.}
\usage{
OasisAPI
}
\value{
Object of \code{\link{R6Class}} with methods for connecting to Oasis API.
}
\description{
R6 Class for OasisUI API Hub.
}
\section{Arguments}{

\describe{
\item{user}{string for username.}
\item{pwd}{string for user password.}
}
}

\section{Privates}{

\describe{
\item{httptype}{Type of connection (application/json); default is NULL.}
\item{url}{url to connect with API; default is NULL.}
\item{access_token}{String for API log in; default is NULL.}
\item{refresh_token}{String for API access token refresh; default is NULL.}
\item{version}{Parameter for API connection; default is NULL.}
\item{conn_init}{Structure with the api connection info; default is NULL.}
}
}

\section{Methods}{

\describe{

Initialize
 \item{\code{set_httptype(httptype)}}{Set httptype private.}
 \item{\code{api_init(host, port)}}{Initialize api and set url private.}
 \item{\code{set_version(version)}}{Set version private.}
 \item{\code{get_url()}}{Return private url.}
 \item{\code{get_conn_init()}}{Return conn_init.}
 \item{\code{get_http_type()}}{Return http_type.}
 api response
 \item{\code{api_handle_response(response)}}{Handles api response.}
 \item{\code{api_fetch_response(meth, args, logMessage = print)}}{Fetches api response.}
 access token
 \item{\code{api_access_token(user, pwd)}}{Returns response of api access token.}
 \item{\code{set_access_token(user, pwd)}}{Set private access token.}
 \item{\code{get_access_token()}}{Return private access token.}
 refresh token
 \item{\code{api_refresh_token(user, pwd)}}{Returns response of api refresh token.
 Passing the `refresh_token` through the authorization header does
  not seem to be standard oauth2 as described in
  <https://tools.ietf.org/html/rfc6749>. This also makes it impossible to use
  `httr`'s built-in oauth2 mechanisms, which would provide automatic token
  refreshing within [httr::POST()], [httr::GET()], etc. Instead we have to
  check outside [httr::POST()] / [httr::GET()] and if necessary, refresh and
  redo the request. See also the unexported `api_fetch_response()`.}
 \item{\code{set_refresh_token(user, pwd)}}{Set private refresh token.}
 \item{\code{get_refresh_token()}}{Return private refresh token.}
 \item{\code{post_refresh_token()}}{Post refresh token.}
 version
 \item{\code{set_version()}}{Set private version.}
 \item{\code{get_version()}}{Return private version.}
 healtcheck
 \item{\code{api_get_healthcheck()}}{Perform api healthcheck.}
 api query
 \item{\code{api_query(uery_path, query_list, query_method, ...)}}{Construct query to the api.}
 \item{\code{api_get_query(uery_path, query_list, ...)}}{Construct GET query to the api.}
 \item{\code{api_post_query(uery_path, query_list, ...)}}{Construct POST query to the api.}
 \item{\code{api_delete_query(uery_path, query_list, ...)}}{Construct DELETE query to the api.}
 \item{\code{api_post_file_query(query_path, query_list = NULL, query_body = NULL, ...)}}{POST file query to the api.}
 }
}

\section{Usage}{

\preformatted{oasisapi <- OasisAPI$new()
oasisapi$method(arg)
}
}

\keyword{datasets}
